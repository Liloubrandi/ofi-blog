"use strict";(self.webpackChunkofi_blog_versioned=self.webpackChunkofi_blog_versioned||[]).push([[32553],{53412:function(n,e,r){r.r(e),r.d(e,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return d},default:function(){return f}});var t=r(83117),o=r(80102),i=(r(67294),r(3905)),a=["components"],c={},s="Screencoord",l={unversionedId:"Programmieren-1/Turtlegrafik/screen-coords.nosync",id:"Programmieren-1/Turtlegrafik/screen-coords.nosync",title:"Screencoord",description:"Draw the screen coordinates.",source:"@site/docs/Programmieren-1/02-Turtlegrafik/900-screen-coords.nosync.md",sourceDirName:"Programmieren-1/02-Turtlegrafik",slug:"/Programmieren-1/Turtlegrafik/screen-coords.nosync",permalink:"/Programmieren-1/Turtlegrafik/screen-coords.nosync",editUrl:"https://github.com/lebalz/ofi-blog/edit/main/docs/Programmieren-1/02-Turtlegrafik/900-screen-coords.nosync.md",tags:[],version:"current",lastUpdatedAt:1639693102,formattedLastUpdatedAt:"12/16/2021",sidebarPosition:900,frontMatter:{},sidebar:"sidebar",previous:{title:"Python Programme",permalink:"/Programmieren-1/Turtlegrafik/python-scripts"},next:{title:"Python",permalink:"/category/python"}},d=[],m={toc:d};function f(n){var e=n.components,r=(0,o.Z)(n,a);return(0,i.kt)("wrapper",(0,t.Z)({},m,r,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"screencoord"},"Screencoord"),(0,i.kt)("p",null,"Draw the screen coordinates."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"live_py title=Screen--coordinates.py id=71b84778-74e3-48be-a072-c5ca98f6b0a7",live_py:!0,title:"Screen--coordinates.py",id:"71b84778-74e3-48be-a072-c5ca98f6b0a7"},"from turtle import *\n\nX = (-20, 120)\nY = (-10, 40)\nTICK = 10\nSCALE = 3\nDRAW_COORD = False\n\nturtle.set_defaults(\n    canvwidth = 2 * SCALE * (X[1] - X[0]),\n    canvheight = 2 * SCALE * (Y[1] - Y[0])\n)\nspeed(100)\ndef move(x, y):\n    penup()\n    goto(x, y)\n    pendown()\n    \ndef write_tick(tick: int | float, is_int: bool = True):\n    if is_int:\n        write(int(tick), font=(\"Arial\", 8, \"normal\"), align='right')\n    else:\n        write(tick, font=(\"Arial\", 8, \"normal\"), align='right')\n\ndef grid(xmin: int, xmax: int, ymin: int, ymax: int, tick: int, scale: int = 1):\n    old_pos = getturtle().pos()\n    old_pensize = getturtle().pensize()\n    pensize(1)\n    old_color = getturtle().color()\n    pencolor('lightgray')\n    offset_x = len(str(max(xmax, xmin))) * 2\n    offset_y = len(str(max(ymax, ymin))) * 2\n    for xtick in range(scale * xmin, scale * xmax + 1, scale * tick):\n        move(xtick + offset_x, scale * ymin - 15)\n        pencolor('black')\n        write_tick(xtick / scale, int(tick) == tick)\n        # pencolor('lightgray')\n        move(xtick, scale * ymin)\n        goto(xtick, scale * ymax)\n\n    for ytick in range(scale * ymin, scale *  ymax + 1, scale * tick):\n        move(scale * xmin - 5, ytick - offset_y + 3)\n        pencolor('black')\n        write_tick(ytick / scale, int(tick) == tick)\n        # pencolor('lightgray')\n        move(scale * xmin, ytick)\n        goto(scale * xmax, ytick)\n    \n    move(*old_pos)\n    pensize(old_pensize)\n    color(*old_color)\n\ngrid(*X, *Y, TICK, SCALE)\n\nif DRAW_COORD:\n    dim = 250\n    # draw x axis\n    backward(250)\n    forward(500)\n    left(150)\n    forward(20)\n    backward(20)\n    right(300)\n    forward(20)\n    penup()\n    goto(240, -20)\n    write('x', font=(\"Arial\", 24, \"normal\"))\n    \n    \n    # draw y axis\n    home()\n    left(90)\n    pendown()\n    backward(250)\n    forward(500)\n    left(150)\n    forward(20)\n    backward(20)\n    right(300)\n    forward(20)\n    penup()\n    goto(-30, 240)\n    write('y', font=(\"Arial\", 24, \"normal\"),)\n    home()\n\n")))}f.isMDXComponent=!0}}]);